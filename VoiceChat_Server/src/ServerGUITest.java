
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.ServerSocket;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author khuon
 */
public class ServerGUITest extends javax.swing.JFrame {

    /**
     * Creates new form ServerGUITest
     */
    ArrayList<RoomChat> list;
    static DefaultTableModel model;
    static void updateTableAddParticipant(int port){
        for(int i=0; i< roomTable.getRowCount();i++){
            if(Integer.parseInt(roomTable.getValueAt(i, 1).toString()) == port){
                int current = Integer.parseInt(roomTable.getValueAt(i, 3).toString());
                roomTable.setValueAt(current+1, i, 3);
            }
        }
    }
    static void updateTableRemoveParticipant(int port){
        for(int i=0; i< roomTable.getRowCount();i++){
            if(Integer.parseInt(roomTable.getValueAt(i, 1).toString()) == port){
                int current = Integer.parseInt(roomTable.getValueAt(i, 3).toString());
                roomTable.setValueAt(current-1, i, 3);
            }
        }
    }
    static void addRoomToTable(RoomChat rc){
        int port = rc.getPort();
        int maxParticipant = rc.getMaxParticipant();
        int currentParticipant = rc.getCurrentParticipant();
        model.addRow(new Object[]{roomTable.getRowCount()+1,port,maxParticipant,currentParticipant});
    }
//    static boolean isRoomAvailable(int port){
//        for(int i=0; i< roomTable.getRowCount();i++){
//            if(Integer.parseInt(roomTable.getValueAt(i, 1).toString()) == port){
//                int current = Integer.parseInt(roomTable.getValueAt(i, 3).toString());
//                int max = Integer.parseInt(roomTable.getValueAt(i, 2).toString());
//                return current < max;
//            }
//        }
//        return false;
//    }
    public void showLog(){
                new Thread() { //start logger
            @Override
            public void run() {
                for (;;) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                    }
                    if (!Log.get().equals(log.getText())) {
                        log.setText(Log.get());
                        log.getCaret().setDot(Log.get().length());
                    }
                }
            }
        }.start();
    }
    public ServerGUITest() {
        initComponents();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        list = ListRoomChat.getListRoomChat();
        //default rooms
        int defaultPort = -1;
        for(int i=1999;i<40000;i++){
            try{
                ServerSocket s = new ServerSocket(i);
                defaultPort = i;
                s.close();
                break;
            }catch(IOException e){
            }
        }
        if(defaultPort > 0){
            RoomChat room1 = new RoomChat(defaultPort, 2, 0);
        list.add(room1);
        }
        //
        for (RoomChat rc : list) {
            int port = rc.getPort();
            int maxParticipant = rc.getMaxParticipant();
            int currentParticipant = rc.getCurrentParticipant();
            ServerThread serverThread = new ServerThread(port, true);
            serverThread.start();
        }
        
        model = (DefaultTableModel) roomTable.getModel();
        model.setRowCount(0);
        for(int i=0;i<list.size();i++){
            int port = list.get(i).getPort();
            int maxParticipant = list.get(i).getMaxParticipant();
            int currentParticipant = list.get(i).getCurrentParticipant();
            model.addRow(new Object[]{i+1, port, maxParticipant, currentParticipant});
        }
        showLog();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAddTrigger = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "STT", "Số phòng", "Tối đa", "Hiện tại"
            }
        ));
        roomTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(roomTable);

        log.setColumns(20);
        log.setRows(5);
        jScrollPane2.setViewportView(log);

        jLabel1.setText("Danh sách phòng");

        jLabel2.setText("Log");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("SERVER");

        btnAddTrigger.setText("Thêm phòng");
        btnAddTrigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTriggerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(btnAddTrigger))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddTrigger))
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomTableMouseClicked
        // TODO add your handling code here:
        int selectedPort = Integer.parseInt(model.getValueAt(roomTable.getSelectedRow(), 1).toString());
        for(RoomChat rc : ListRoomChat.getListRoomChat()){
            if(rc.getPort() == selectedPort){
                ArrayList<Participant> listP = rc.getParticipants();
                new RoomDetail(selectedPort, listP).setVisible(true);
            }
            
        }
        
    }//GEN-LAST:event_roomTableMouseClicked
    AddRoom ar = new AddRoom();
    private void btnAddTriggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTriggerActionPerformed
        // TODO add your handling code here:
        
        ar.setVisible(true);
        ar.btnAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int port = -1;
//                int port = Integer.parseInt(ar.txtPort.getText());
                for(int i=1999;i<40000;i++){
                    try{
                        ServerSocket ss = new ServerSocket(i);
                        port = i;
                        ss.close();
                        break;
                        
                    }catch(Exception e1){
                    }
                }
                if(port > 0){
                    int maxP = Integer.parseInt(ar.txtMax.getText());
                    ServerThread serverThread = new ServerThread(port, true);
                    serverThread.start();
                    RoomChat rc = new RoomChat(port, maxP, 0);
                    ListRoomChat.addRoomChat(rc);
                    addRoomToTable(rc);
                    ar.setVisible(false);
                }
            }
        });
    }//GEN-LAST:event_btnAddTriggerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerGUITest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTrigger;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea log;
    public static javax.swing.JTable roomTable;
    // End of variables declaration//GEN-END:variables
}
